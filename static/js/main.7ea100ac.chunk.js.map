{"version":3,"sources":["navbar/NavBar.jsx","components/about/About.jsx","components/home/Home.jsx","routes/Routes.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","class","to","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","About","Home","src","alt","loading","Routes","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSA8BeA,G,YA1BA,WACX,OACI,yBAAKC,MAAM,iBACP,yBAAKA,MAAM,+CACP,kBAAC,IAAD,CAASC,GAAG,cAAcD,MAAM,gBAE5B,uBAAGE,UAAU,QAAb,WAEJ,4BAAQF,MAAM,iBAAiBG,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC9K,0BAAMR,MAAM,yBAEhB,yBAAKA,MAAM,2BAA2BS,GAAG,0BACrC,wBAAIT,MAAM,sBACN,wBAAIA,MAAM,YACN,kBAAC,IAAD,CAASC,GAAG,cAAcD,MAAM,YAAhC,SAEJ,wBAAIA,MAAM,YACN,kBAAC,IAAD,CAASC,GAAG,mBAAmBD,MAAM,YAArC,gBCXbU,EARD,WACV,OACI,+BCWOC,G,MAZF,WACT,OACI,yBAAKT,UAAU,kBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,WAAWU,IAAI,2BAA2BC,IAAI,cAAcC,QAAQ,cCMxFC,EATA,WACX,OACI,oCACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWP,IAC3C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,mBAAmBC,UAAWR,MCa7CS,MAbf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,UCHUkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ea100ac.chunk.js","sourcesContent":["import React from 'react';\nimport '../assets/style/NavBar.scss';\nimport { NavLink } from 'react-router-dom';\n\nconst NavBar = () => {\n    return (\n        <div class=\"nav-container\">\n            <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                <NavLink to='/portfolio/' class=\"navbar-brand\">\n                    {/* <img src=\"/images/personal_dp.jpeg\" width=\"30\" height=\"30\" alt=\"\" loading=\"lazy\" /> */}\n                    <p className=\"head\">Akarsh</p>\n                </NavLink>\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul class=\"navbar-nav mr-auto\">\n                        <li class=\"nav-item\">\n                            <NavLink to='/portfolio/' class=\"nav-link\">Home</NavLink>\n                        </li>\n                        <li class=\"nav-item\">\n                            <NavLink to='/portfolio/about' class=\"nav-link\">About</NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    );\n}\n\nexport default NavBar;\n\n\n","import React from 'react';\n\nconst About = () => {\n    return (\n        <div>\n\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport '../../assets/style/Home.scss';\n\nconst Home = () => {\n    return (\n        <div className=\"home-container\">\n            <div className=\"intro-container\">\n                <div className=\"img-container\">\n                    <img className=\"img-item\" src=\"/images/personal_dp.jpeg\" alt=\"akarsh.jpeg\" loading=\"lazy\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import { Route } from 'react-router-dom';\nimport React from 'react';\nimport About from \"../components/about/About\";\nimport Home from '../components/home/Home';\n\nconst Routes = () => {\n    return (\n        <>\n            <Route exact path='/portfolio/' component={Home} />\n            <Route exact path='/portfolio/about' component={About} />\n        </>\n    )\n}\n\nexport default Routes;","import React from 'react';\nimport {\n  BrowserRouter,\n  Switch\n} from 'react-router-dom';\nimport './App.css';\nimport NavBar from './navbar/NavBar';\nimport Routes from './routes/Routes';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Routes />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}